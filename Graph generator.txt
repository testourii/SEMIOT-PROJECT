[{"id":"78820fd.14db1f","type":"file","z":"edd02289.e3b61","name":"SEMIot  Graph","filename":"C:\\Users\\Houcem\\.node-red\\lib\\flows\\SEMIot Graph.json","appendNewline":true,"createDir":true,"overwriteFile":"true","x":680,"y":160,"wires":[]},{"id":"21c97759.1a7598","type":"function","z":"edd02289.e3b61","name":"Graph Generator","func":"H=msg.payload\n//*********************\n//ignoring extra nodes\nj=-1;\nT=[];\nfor (k = 0;k < H.length; k++){\n      if ( H[k].type!=\"mqtt-broker\" && H[k].type!=\"tab\" && H[k].type!=\"messagehub service\" ){\nj++;\nT[j]=H[k];\n}\n}\n//**************************\nk=1;\n//make wires between mqtt input/output nodes\nfor (i = 0; i < T.length; i++)\n{ if(T[i].type==\"mqtt out\"){\n       for(j=0;j<T.length;j++){\n         if ( (T[j].type==\"mqtt in\") && (T[i].topic==T[j].topic)){\n             p=[]\n             p.push(T[j].id);\n             T[i].wires.push(p);\n         }\n       }\n    }\nif(T[i].type==\"kafka\"){\n       for(j=0;j<T.length;j++){\n         if ( (T[j].type==\"kafka in\") && (T[i].topics==T[j].topics)){\n             T[i].wires.push(T[j].id)\n         }\n       }\n    }\n}\n//**************************\n//************\nvar J =\"[\";\nfor (k = 0; k< T.length; k++) {\n   if (  !T[k].type.includes(\"subflow\")){//ignoring extra nodes\n   node=T[k]\n\n   if ((node.type==\"mqtt out\")||(node.type==\"mqtt in\")){\n    wires=[];\n    id=RED.util.generateId();\n    wires.push(id)\n   nodeS= {\n        \"id\": id,\n        \"name\":node.name+\"-ouput\",\n        \"type\": \"SEMIOT\",\n        \"z\": node.z,\n        \"security\": \"\",\n        \"typeL\": \"\",\n        \"x\": node.x,\n        \"y\":node.y+50,\n        \"wires\":[node.wires[0]],\n\n\n    }\n      J=J+JSON.stringify(nodeS);\n            J+=\",\";\n             nodeS= {\n        \"id\": node.id,\n        \"name\":node.name+\"-input\",\n        \"type\": \"SEMIOT\",\n        \"z\": node.z,\n        \"security\": \"\",\n        \"typeL\": \"\",\n        \"x\": node.x,\n        \"y\":node.y,\n        \"wires\":[wires]\n    }\n     J=J+JSON.stringify(nodeS);\n    J+=\",\";\n}\nelse if(node.outputs){\nwires=[];\n\nfor(i=1;i<=node.outputs;i++){\nid=RED.util.generateId();\n   k=k*-1;\n   nodeS= {\n        \"id\": id,\n        \"name\":node.name+\"ouput-\"+i,\n        \"type\": \"SEMIOT\",\n        \"z\": node.z,\n        \"security\": \"\",\n        \"typeL\": \"\",\n        \"x\": node.x,\n        \"y\":node.y+5*k,\n        \"wires\":[node.wires[i-1]]\n    }\n    //*******\n\n    for(u=0;u<T.length;u++){\n        if (T[u].type==\"subflow\")\n        {\n            id1=T[u].out[0].wires[0].id\n        if ((id1==node.id)&&(node.wires[i-1].length===0))\n           T[u].out[0].wires[0].id=id;\n        }\n    }\n    //*******\n      J=J+JSON.stringify(nodeS);\n            J+=\",\";\n    wires.push(id);\n}\nnode.wires=wires;\n nodeS= {\n        \"id\": node.id,\n        \"name\":node.name+\"-input\",\n        \"type\": \"SEMIOT\",\n        \"z\": node.z,\n        \"security\": \"\",\n        \"typeL\": \"\",\n        \"x\": node.x,\n        \"y\":node.y,\n        \"wires\":[wires]\n    }\n     J=J+JSON.stringify(nodeS);\n    J+=\",\";\n}\nelse{\n\n   nodeS= {\n        \"id\": node.id,\n        \"name\":node.name,\n        \"type\": \"SEMIOT\",\n        \"z\": node.z,\n        \"security\": \"\",\n        \"typeL\": \"\",\n        \"x\": node.x,\n        \"y\":node.y,\n        \"wires\":node.wires\n   }\n   if(!nodeS.wires[0]){\n        nodeS= {\n        \"id\": node.id,\n        \"name\":node.name,\n        \"type\": \"SEMIOT\",\n        \"z\": node.z,\n        \"security\": \"\",\n        \"typeL\": \"\",\n        \"x\": node.x,\n        \"y\":node.y,\n        \"wires\":[node.wires]\n   }\n   }\n    J=J+JSON.stringify(nodeS);\n    J+=\",\";\n\n}\n}\n}\n//********\nfor (k = 0; k< T.length; k++) {\n   node=T[k]\nif(node.type.includes(\"subflow\")){\n     J=J+JSON.stringify(node);\n    J+=\",\";\n}}\n//********\nJ = J.substring(0, J.length - 1);\nmsg.payload=J+\"]\";\nreturn msg;\n","outputs":1,"noerr":0,"x":430,"y":160,"wires":[["78820fd.14db1f"]]},{"id":"953a1a4a.3d17f8","type":"flow-reader","z":"edd02289.e3b61","name":"IoT  Work-Flow","protocol":"http","url":"127.0.0.1:1880","sheet":"Work Flow","auth":false,"once":true,"x":180,"y":160,"wires":[["21c97759.1a7598"]],"icon":"node-red/subflow.png"}]
